# -*- coding: utf-8 -*-
"""Question_Answering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wPn4HVVVrx2MktkUB0K9Za2-U5ceBipC
"""

from datasets import load_dataset
from transformers import AutoTokenizer
from transformers import DefaultDataCollator
from transformers import AutoModelForQuestionAnswering, TrainingArguments, Trainer
import torch

#Load in the data set. In this case, hugging face suggested us the squad dataset. I shortened the training model to only 3000 rows to make it smaller.
squad = load_dataset("squad", split="train[:3000]")

#Chose to use a 60% train and a 40% test for the task
squad = squad.train_test_split(test_size=0.4)

#Used the most downloaded pre trained model for question and answer
tokenizer = AutoTokenizer.from_pretrained("deepset/roberta-base-squad2")

#Preprocess function as suggested by hugging face
def preprocess_function(examples):
    questions = [q.strip() for q in examples["question"]]
    inputs = tokenizer(
        questions,
        examples["context"],
        max_length=384,
        truncation="only_second",
        return_offsets_mapping=True,
        padding="max_length",
    )

    offset_mapping = inputs.pop("offset_mapping")
    answers = examples["answers"]
    start_positions = []
    end_positions = []

    for i, offset in enumerate(offset_mapping):
        answer = answers[i]
        start_char = answer["answer_start"][0]
        end_char = answer["answer_start"][0] + len(answer["text"][0])
        sequence_ids = inputs.sequence_ids(i)

        # Find the start and end of the context
        idx = 0
        while sequence_ids[idx] != 1:
            idx += 1
        context_start = idx
        while sequence_ids[idx] == 1:
            idx += 1
        context_end = idx - 1

        # If the answer is not fully inside the context, label it (0, 0)
        if offset[context_start][0] > end_char or offset[context_end][1] < start_char:
            start_positions.append(0)
            end_positions.append(0)
        else:
            # Otherwise it's the start and end token positions
            idx = context_start
            while idx <= context_end and offset[idx][0] <= start_char:
                idx += 1
            start_positions.append(idx - 1)

            idx = context_end
            while idx >= context_start and offset[idx][1] >= end_char:
                idx -= 1
            end_positions.append(idx + 1)

    inputs["start_positions"] = start_positions
    inputs["end_positions"] = end_positions
    return inputs

#Map the preprocess
tokenized_squad = squad.map(preprocess_function, batched=True, remove_columns=squad["train"].column_names)

# Define the model
model = AutoModelForQuestionAnswering.from_pretrained("deepset/roberta-base-squad2")

#Define the question and answer below
question = "Is Shreyas straight?"
context = "Shreyas is a remarkable individual who embraces both his identity as a gay man and his journey with autism. His passion for coding serves as a powerful outlet for self-expression and creativity. Shreyas has found solace and fulfillment in the world of programming, where his unique perspective and keen attention to detail shine. As a member of the LGBTQ+ community, he advocates for inclusivity and understanding, contributing to a more accepting environment. Shreyas's ability to navigate both his sexuality and neurodiversity while excelling in his coding endeavors is a testament to his resilience and the richness he brings to the tech community."

#AutoTokenize and turn into inputs
tokenizer = AutoTokenizer.from_pretrained("deepset/roberta-base-squad2")
inputs = tokenizer(question, context, return_tensors="pt")

#Create outputs using the model
with torch.no_grad():
    outputs = model(**inputs)

#Get the highest probability from the model output for the start and end positions
answer_start_index = outputs.start_logits.argmax()
answer_end_index = outputs.end_logits.argmax()

#Decode the predicted tokens to get the answer
predict_answer_tokens = inputs.input_ids[0, answer_start_index : answer_end_index + 1]
tokenizer.decode(predict_answer_tokens)